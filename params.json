{"body":"knife-community\r\n===============\r\n[![Build Status](https://secure.travis-ci.org/miketheman/knife-community.png?branch=master)](http://travis-ci.org/miketheman/knife-community)\r\n[![Dependency Status](https://gemnasium.com/miketheman/knife-community.png)](https://gemnasium.com/miketheman/knife-community)\r\n\r\nA Knife plugin to assist with deploying completed Chef cookbooks to the Community Site\r\n\r\nIntro\r\n-----\r\n\r\nThere are sooo many ways to [deliver software][wiki:apppkg].\r\nApt has 'deb', Yum has 'rpm', Node has 'npm', RubyGems has 'gem', Java has 'jar', etc etc etc.\r\n\r\nIn The Land of [Chef][chef], the typical unit of shareable software is a 'cookbook'.\r\n\r\nThe centralized location for sharing cookbooks is the [Community Site][opcs], and we already have support to download/install these elements, either it be through [knife itself][kcsi], [librarian][libr], and [berkshelf][brks], and there are probably others.\r\n\r\nWhat we _don't_ have is a good method for cookbook maintainers to contribute back to the Community Site, while semi-enforcing good habits, such as version incrementing, git tags and forming the package correctly.\r\n\r\nAssumptions\r\n-----------\r\n\r\n### Basics\r\n* You know what Git is\r\n* You know what Chef is\r\n* You have Push permissions to the remote GitHub repository\r\n* You don't already have a perfected workflow that works for you\r\n* You want to be a helpful citizen of the community\r\n\r\n### Important\r\n* You have **not** incremented the version number in `metadata.rb` - this will do so for you\r\n* You have a `name` string defined in your `metadata.rb`, OR your repository name is identical to your cookbook name\r\n* You have either committed or staged all changes to be included with this version release. Any uncommitted changed should be `git stash`ed, or stage them to be committed along with the version via `git add`\r\n\r\nCookbook Release Workflow\r\n-------------------------\r\n\r\nAssuming you have made your changes, tested your code thoroughly (one can hope!), all merged into your `master` branch, and are ready to release a new version of your cookbook, here's a flow to follow:\r\n\r\n1. Ensure that the branch is ready to be committed. If there are uncommitted changes, error out.\r\n1. Read in the current `metadata.rb`, inspect the `version` string, and increment it to the next minor version. Override with `--ver`\r\n1. Create a git commit for the `metadata.rb` change.\r\n1. Create a git tag with the version number (no leading \"v\" or the like)\r\n1. Push all commits/tags to the set remote, typically like `git push origin master`. Override with `--branch`\r\n1. Create a 'package' - effectively a compressed tarball - and upload it to the community site\r\n1. Have a beer, or glass of wine - you choose.\r\n\r\nThis flow can probably be used for most cookbook maintainers.\r\n\r\nUsage\r\n=====\r\n\r\nInvoke\r\n------\r\n\r\n    knife community release COOKBOOK [X.Y.Z | --remote | --branch | --devodd ]\r\n\r\nFlags\r\n-----\r\n\r\n* `X.Y.Z` - String, Version in X.Y.Z format. Manually specify the version.\r\n\r\n    If unspecified, increments to the next x.y.Z version\r\n\r\n* `--remote REMOTE` - String, Remote repository to push to. Defaults to `origin`\r\n\r\n* `--branch BRANCHNAME` - String, Branch name. Defaults to `master`\r\n\r\n* `--devodd` - Boolean. If specified, post-release, will bump the minor version to the next odd number, and generate another commit & push (but no tags).\r\n\r\n    This is a flow that some adopt by having even-only numbered releases, utilizing the [odd numbered ones for development][wiki:oddver].\r\n\r\n\r\nSome good ideas while working on a cookbook\r\n-------------------------------------------\r\n\r\nCreating a `CHANGELOG.md` that details a short message about any changes included in each release is really helpful to anyone looking at your updated cookbook and seeing if it addresses a problem they have, without delving deeper into the code.\r\n\r\nUpdating a `TODO.md` file if there are outstanding known issues, planned work for the next version, etc. A TODO file also helps anyone else in the community try to tackle a problem you haven't figured out or gotten to yet, so they can issue a pull request for your cookbook.\r\n\r\nFollow [Semantic Versioning][semver] when choosing which version number to increment to. Start your cookbook at 0.1.0, and increment from there, until you are confident enough in a 1.0.0 version.\r\n\r\nTest, test, test. And then test again.\r\n\r\n\r\n[brks]: http://berkshelf.com/\r\n[chef]: http://www.opscode.com/chef/\r\n[kcsi]: http://wiki.opscode.com/display/chef/Managing+Cookbooks+With+Knife#ManagingCookbooksWithKnife-CookbookSite\r\n[libr]: https://github.com/applicationsonline/librarian\r\n[opcs]: http://community.opscode.com/\r\n[semver]: http://semver.org/\r\n[wiki:apppkg]: http://en.wikipedia.org/wiki/List_of_software_package_management_systems#Application-level_package_managers\r\n[wiki:oddver]: http://en.wikipedia.org/wiki/Software_versioning#Odd-numbered_versions_for_development_releases\r\n","google":"UA-34821130-1","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A Knife plugin to assist with deploying completed Chef cookbooks to the Community Site","name":"knife-community"}